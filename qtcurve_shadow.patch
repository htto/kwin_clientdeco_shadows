--- qtcurve-1.8.18/qt4/kwin/qtcurveclient.cpp.orig	2014-02-06 22:27:01.780779655 +0100
+++ qtcurve-1.8.18/qt4/kwin/qtcurveclient.cpp	2014-02-07 17:38:45.130159360 +0100
@@ -55,44 +55,17 @@
 #include "qtcurvetogglebutton.h"
 #include "qtcurvesizegrip.h"
 #include <common/common.h>
-#if KDE_IS_VERSION(4, 3, 0)
 #include "tileset.h"
-#endif
 
 #include <style/qtcurve.h>
 
-#if KDE_IS_VERSION(4, 3, 85) && !KDE_IS_VERSION(4, 8, 80)
-#include <KDE/KIconLoader>
-#endif
-
-#if KDE_IS_VERSION(4, 3, 0)
-    #define COMPOSITING_ENABLED compositingActive()
-#else
-    #define COMPOSITING_ENABLED KWindowSystem::compositingActive()
-#endif
+#define COMPOSITING_ENABLED compositingActive()
 
 namespace KWinQtCurve
 {
 
 static const int constTitlePad=4;
 
-#if KDE_IS_VERSION(4, 3, 85) && !KDE_IS_VERSION(4, 8, 80)
-#define TAB_CLOSE_ICON_SIZE tabCloseIconSize(layoutMetric(LM_TitleHeight))
-
-static const int constInvalidTab=-1;
-static const int constAddToEmpty=-2;
-
-static inline int tabCloseIconSize(int titleHeight)
-{
-    int size=titleHeight*0.8;
-
-    if(0==size%2)
-        size++;
-    return size;
-}
-
-#endif
-
 int getMenubarSizeProperty(WId wId)
 {
     return qtcX11GetShortProp(wId, qtc_x11_qtc_menubar_size);
@@ -205,15 +178,6 @@ static void drawFadedLine(QPainter *pain
     painter->drawLine(start, end);
 }
 
-#if KDE_IS_VERSION(4, 3, 85) && !KDE_IS_VERSION(4, 8, 80)
-static void paintTabSeparator(QPainter *painter, const QRect &r)
-{
-    drawFadedLine(painter, r, Qt::white);
-    drawFadedLine(painter, r.adjusted(1, 0, 1, 0), Qt::black);
-    drawFadedLine(painter, r.adjusted(2, 0, 2, 0), Qt::white);
-}
-#endif
-
 static void fillBackground(EAppearance app, QPainter &painter, const QColor &col, const QRect &fillRect, const QRect &widgetRect, const QPainterPath path)
 {
     if (!qtcIsFlatBgnd(app) || !widgetRect.isEmpty()) {
@@ -239,23 +203,13 @@ static void fillBackground(EAppearance a
 // }
 
 QtCurveClient::QtCurveClient(KDecorationBridge *bridge, QtCurveHandler *factory)
-#if KDE_IS_VERSION(4, 3, 0)
              : KCommonDecorationUnstable(bridge, factory)
-#else
-             : KCommonDecoration(bridge, factory)
-#endif
              , m_resizeGrip(0L)
              , m_titleFont(QFont())
              , m_menuBarSize(-1)
              , m_toggleMenuBarButton(0L)
              , m_toggleStatusBarButton(0L)
 //              , m_hover(false)
-#if KDE_IS_VERSION(4, 3, 85) && !KDE_IS_VERSION(4, 8, 80)
-             , m_clickInProgress(false)
-             , m_dragInProgress(false)
-             , m_mouseButton(Qt::NoButton)
-             , m_targetTab(constInvalidTab)
-#endif
 {
     Handler()->addClient(this);
 }
@@ -292,37 +246,35 @@ int QtCurveClient::layoutMetric(LayoutMe
         case LM_BorderLeft:
         case LM_BorderRight:
         case LM_BorderBottom:
-            return respectWindowState && isMaximized() ? 0 : Handler()->borderSize(LM_BorderBottom==lm);
+            return isShadeable() ? (respectWindowState && isMaximized() ? 0 : Handler()->borderSize(LM_BorderBottom==lm)) : 0;
         case LM_TitleEdgeTop:
-            return respectWindowState && isMaximized() ? 0 : Handler()->borderEdgeSize();
+            return isShadeable() ? (respectWindowState && isMaximized() ? 0 : Handler()->borderEdgeSize()) : 0;
         case LM_TitleEdgeBottom:
-            return respectWindowState && isMaximized() && Handler()->borderlessMax() ? 0 :  Handler()->borderEdgeSize();
+            return isShadeable() ? (respectWindowState && isMaximized() && Handler()->borderlessMax() ? 0 :  Handler()->borderEdgeSize()) : 0;
         case LM_TitleEdgeLeft:
         case LM_TitleEdgeRight:
-            return respectWindowState && isMaximized() ? 0 : Handler()->borderEdgeSize();
+            return isShadeable() ? (respectWindowState && isMaximized() ? 0 : Handler()->borderEdgeSize()) : 0;
         case LM_TitleBorderLeft:
         case LM_TitleBorderRight:
-            return 5;
+            return isShadeable() ? 5 : 0;
         case LM_ButtonWidth:
         case LM_ButtonHeight:
         case LM_TitleHeight:
-            return respectWindowState && isMaximized() && Handler()->borderlessMax()
+            return isShadeable() ? (respectWindowState && isMaximized() && Handler()->borderlessMax()
                         ? 0
                         : respectWindowState && isToolWindow()
                             ? Handler()->titleHeightTool()
-                            : Handler()->titleHeight();
+                            : Handler()->titleHeight()) : 0;
         case LM_ButtonSpacing:
             return 0;
         case LM_ButtonMarginTop:
             return 0;
-#if KDE_IS_VERSION(4, 3, 0)
         case LM_OuterPaddingLeft:
         case LM_OuterPaddingRight:
         case LM_OuterPaddingTop:
         case LM_OuterPaddingBottom:
             if(Handler()->customShadows())
                 return Handler()->shadowCache().shadowSize();
-#endif
         default:
             return KCommonDecoration::layoutMetric(lm, respectWindowState, btn);
     }
@@ -358,10 +310,6 @@ void QtCurveClient::init()
     widget()->setAttribute(Qt::WA_OpaquePaintEvent, true);
     widget()->setAttribute(Qt::WA_NoSystemBackground);
 
-#if KDE_IS_VERSION(4, 3, 85) && !KDE_IS_VERSION(4, 8, 80)
-    widget()->setAcceptDrops(true);
-#endif
-
     if(Handler()->showResizeGrip())
         createSizeGrip();
     if (isPreview())
@@ -409,26 +357,26 @@ void QtCurveClient::paintEvent(QPaintEve
     QPainter             painter(widget());
     QRect                r(widget()->rect());
     QStyleOptionTitleBar opt;
-    int                  windowBorder(Handler()->wStyle()->pixelMetric((QStyle::PixelMetric)QtC_WindowBorder, 0L, 0L));
+    int                  windowBorder(isShadeable() ? Handler()->wStyle()->pixelMetric((QStyle::PixelMetric)QtC_WindowBorder, 0L, 0L) : QtCurveConfig::BORDER_NONE);
     bool                 active(isActive()),
                          colorTitleOnly(windowBorder&WINDOW_BORDER_COLOR_TITLEBAR_ONLY),
-                         roundBottom(Handler()->roundBottom()),
+                         roundBottom(isShadeable() ? Handler()->roundBottom() : false),
                          preview(isPreview()),
-                         blend(!preview && Handler()->wStyle()->pixelMetric((QStyle::PixelMetric)QtC_BlendMenuAndTitleBar, NULL, NULL)),
+                         blend(!preview && isShadeable() && Handler()->wStyle()->pixelMetric((QStyle::PixelMetric)QtC_BlendMenuAndTitleBar, NULL, NULL)),
                          menuColor(windowBorder&WINDOW_BORDER_USE_MENUBAR_COLOR_FOR_TITLEBAR),
-                         separator(active && windowBorder&WINDOW_BORDER_SEPARATOR),
+                         separator(active && isShadeable() && windowBorder&WINDOW_BORDER_SEPARATOR),
                          maximized(isMaximized());
-    QtCurveConfig::Shade outerBorder(Handler()->outerBorder()),
-                         innerBorder(Handler()->innerBorder());
-    const int            border(Handler()->borderEdgeSize()),
+    QtCurveConfig::Shade outerBorder(isShadeable() ? Handler()->outerBorder() : QtCurveConfig::SHADE_SHADOW),
+                         innerBorder(isShadeable() ? Handler()->innerBorder() : QtCurveConfig::SHADE_NONE);
+    const int            border(isShadeable() ? Handler()->borderEdgeSize() : QtCurveConfig::BORDER_NONE),
                          titleHeight(layoutMetric(LM_TitleHeight)),
                          titleEdgeTop(layoutMetric(LM_TitleEdgeTop)),
                          titleEdgeBottom(layoutMetric(LM_TitleEdgeBottom)),
                          titleEdgeLeft(layoutMetric(LM_TitleEdgeLeft)),
                          titleEdgeRight(layoutMetric(LM_TitleEdgeRight)),
                          titleBarHeight(titleHeight+titleEdgeTop+titleEdgeBottom+(isMaximized() ? border : 0)),
-                         round=Handler()->wStyle()->pixelMetric((QStyle::PixelMetric)QtC_Round, NULL, NULL),
-                         buttonFlags=Handler()->wStyle()->pixelMetric((QStyle::PixelMetric)QtC_TitleBarButtons, NULL, NULL);
+                         round(isShadeable() ? Handler()->wStyle()->pixelMetric((QStyle::PixelMetric)QtC_Round, NULL, NULL) : 0),
+                         buttonFlags(isShadeable() ? Handler()->wStyle()->pixelMetric((QStyle::PixelMetric)QtC_TitleBarButtons, NULL, NULL) : 0);
     int                  rectX, rectY, rectX2, rectY2, shadowSize(0),
                          kwinOpacity(compositing ? Handler()->opacity(active) : 100),
                          opacity(kwinOpacity);
@@ -442,20 +390,14 @@ void QtCurveClient::paintEvent(QPaintEve
                          // APPEARANCE_RAISED is used to signal flat background, but have background image!
                          // In which case we still have a custom background to draw.
     bool                 customBgnd=APPEARANCE_FLAT!=bgndAppearance,
-                         customShadows=
-#if KDE_IS_VERSION(4, 3, 0)
-                            Handler()->customShadows()
-#else
-                            false
-#endif
-                            ;
+                         customShadows= Handler()->customShadows();
 
     painter.setClipRegion(e->region());
+    painter.setClipRegion(getMask(round, r));
 
     if(!preview && compositing && 100==opacity)
         opacity=getOpacityProperty(windowId());
 
-#if KDE_IS_VERSION(4, 3, 0)
     if(customShadows)
     {
         shadowSize=Handler()->shadowCache().shadowSize();
@@ -478,7 +420,9 @@ void QtCurveClient::paintEvent(QPaintEve
         }
         r.adjust(shadowSize, shadowSize, -shadowSize, -shadowSize);
     }
-#endif
+
+    if (isShadeable())
+    {
 
     int   side(layoutMetric(LM_BorderLeft)),
           bot(layoutMetric(LM_BorderBottom));
@@ -619,14 +563,12 @@ void QtCurveClient::paintEvent(QPaintEve
 
     if(outerBorder)
     {
-#if KDE_IS_VERSION(4, 3, 0)
         if(QtCurveConfig::SHADE_SHADOW==outerBorder && customShadows)
         {
             opt.version=2+TBAR_BORDER_VERSION_HACK;
             opt.palette.setColor(QPalette::Shadow, blendColors(Handler()->shadowCache().color(active), windowCol, active ? 0.75 : 0.4));
         }
         else
-#endif
             opt.version=(QtCurveConfig::SHADE_LIGHT==outerBorder ? 0 : 1)+TBAR_BORDER_VERSION_HACK;
         painter.save();
         painter.setClipRect(r.adjusted(0, titleBarHeight, 0, 0), Qt::IntersectClip);
@@ -701,14 +643,12 @@ void QtCurveClient::paintEvent(QPaintEve
         QStyleOptionFrame frameOpt;
 
         frameOpt.palette=opt.palette;
-#if KDE_IS_VERSION(4, 3, 0)
         if(QtCurveConfig::SHADE_SHADOW==innerBorder && customShadows)
         {
             frameOpt.version=2+TBAR_BORDER_VERSION_HACK;
             frameOpt.palette.setColor(QPalette::Shadow, blendColors(Handler()->shadowCache().color(active), windowCol, active ? 0.75 : 0.4));
         }
         else
-#endif
             frameOpt.version=(QtCurveConfig::SHADE_LIGHT==innerBorder ? 0 : 1)+TBAR_BORDER_VERSION_HACK;
         frameOpt.rect=widgetRect.adjusted(-1, -1, 1, 1);
         frameOpt.state=(active ? QStyle::State_Active : QStyle::State_None)|QtC_StateKWin;
@@ -738,87 +678,11 @@ void QtCurveClient::paintEvent(QPaintEve
     bool showIcon=TITLEBAR_ICON_NEXT_TO_TITLE==Handler()->wStyle()->pixelMetric((QStyle::PixelMetric)QtC_TitleBarIcon,  0L, 0L);
     int  iconSize=showIcon ? Handler()->wStyle()->pixelMetric(QStyle::PM_SmallIconSize) : 0;
 
-#if KDE_IS_VERSION(4, 3, 85) && !KDE_IS_VERSION(4, 8, 80)
-    QList<ClientGroupItem> tabList  = clientGroupItems();
-    const int              tabCount = tabList.count();
-
-    // Delete unneeded tab close buttons
-    while(tabCount < m_closeButtons.size() || (1==tabCount && m_closeButtons.size() > 0))
-    {
-        QtCurveButton *btn = m_closeButtons.takeFirst();
-        btn->hide();
-        btn->deleteLater();
-    }
-
-    if(tabCount>1)
-    {
-        QRect allTabGeom = titleRect().adjusted(-1, -titleEdgeTop, 1, 0),
-              tabGeom    = allTabGeom;
-        int   activeTab  = visibleClientGroupItem();
-
-        tabGeom.setWidth(tabGeom.width() / tabCount + 1); // Split titlebar evenly
-        for(int i = 0; i < tabCount; ++i)
-        {
-            // Last tab may have a different width due to rounding
-            if(i==tabCount - 1)
-                tabGeom.setWidth(allTabGeom.width() - tabGeom.width() * i + i - 1);
-
-            int iconSize(TAB_CLOSE_ICON_SIZE);
-
-            if(0==i)
-                paintTabSeparator(&painter, tabGeom);
-            paintTitle(&painter, tabGeom.adjusted(showIcon ? constTitlePad : 0, 0,
-                                                  -(iconSize+(showIcon ? constTitlePad : 0)), 0), QRect(), tabList[i].title(),
-                       showIcon ? tabList[i].icon().pixmap(iconSize) : QPixmap(),  0, true, activeTab==i);
-
-            if(i >= m_closeButtons.size())
-                m_closeButtons.append(new QtCurveButton(ItemCloseButton, this));
-            //m_closeButtons[i]->setActive(isActive() && visibleClientGroupItem()==i);
-            m_closeButtons[i]->setFixedSize(iconSize, iconSize);
-            m_closeButtons[i]->move(tabGeom.right() - iconSize,
-                                     tabGeom.top() + titleEdgeTop + ((tabGeom.height()-iconSize)/2));
-            m_closeButtons[i]->installEventFilter(this);
-            m_closeButtons[i]->show();
-
-            QRect br(tabGeom);
-
-            tabGeom.translate(tabGeom.width() - 1, 0);
-            paintTabSeparator(&painter, tabGeom.adjusted(-1, 0, -1, 0));
-
-            if(i!=activeTab)
-            {
-                QColor gray(Qt::black);
-                gray.setAlphaF(0.1);
-                painter.fillRect(br.adjusted(0==i ? 1 : 0, 0, 0, 0), gray);
-            }
-
-            if(m_dragInProgress && m_targetTab>constInvalidTab &&
-                (i==m_targetTab || ((i==tabCount-1) && m_targetTab==tabCount)))
-            {
-                QPixmap arrow(SmallIcon("arrow-down"));
-                painter.drawPixmap(br.x()+(m_targetTab==tabCount ? tabGeom.width() : 0)-(arrow.width()/2), br.y()+2, arrow);
-            }
-        }
-    }
-    else
-    {
-#endif
         m_captionRect=captionRect(); // also update m_captionRect!
         paintTitle(&painter, m_captionRect, QRect(rectX+titleEdgeLeft, m_captionRect.y(),
                                                    rectX2-(titleEdgeRight+rectX+titleEdgeLeft),
                                                    m_captionRect.height()),
                    m_caption, showIcon ? icon().pixmap(iconSize) : QPixmap(), shadowSize);
-#if KDE_IS_VERSION(4, 3, 85) && !KDE_IS_VERSION(4, 8, 80)
-
-        if(constAddToEmpty==m_targetTab)
-        {
-            QPixmap arrow(SmallIcon("list-add"));
-            painter.drawPixmap(m_captionRect.x(),
-                               m_captionRect.y()+((m_captionRect.height()-arrow.height())/2),
-                               arrow);
-        }
-    }
-#endif
 
     bool hideToggleButtons(true);
     int  toggleButtons(Handler()->wStyle()->pixelMetric((QStyle::PixelMetric)QtC_ToggleButtons, NULL, NULL));
@@ -833,9 +697,6 @@ void QtCurveClient::paintEvent(QPaintEve
     //     if(m_hover)
         {
             if(
-#if KDE_IS_VERSION(4, 3, 85) && !KDE_IS_VERSION(4, 8, 80)
-                1==tabCount &&
-#endif
                 active && (m_toggleMenuBarButton||m_toggleStatusBarButton))
             {
                 if( (buttonsLeftWidth()+buttonsRightWidth()+constTitlePad+
@@ -898,6 +759,8 @@ void QtCurveClient::paintEvent(QPaintEve
         drawFadedLine(&painter, r, color, true, align&(Qt::AlignHCenter|Qt::AlignRight), align&(Qt::AlignHCenter|Qt::AlignLeft));
     }
 
+    }
+
     painter.end();
 }
 
@@ -908,9 +771,9 @@ QtCurveClient::paintTitle(QPainter *pain
                           bool isActiveTab)
 {
     int iconX = capRect.x();
-    bool showIcon = !pix.isNull() && capRect.width()>pix.width();
+    bool showIcon = !pix.isNull() && capRect.width()>pix.width() && isShadeable();
 
-    if(!cap.isEmpty())
+    if(!cap.isEmpty() && isShadeable())
     {
         painter->setFont(m_titleFont);
 
@@ -1046,13 +909,11 @@ void QtCurveClient::updateWindowShape()
     else
     {
         QRect r(
-#if KDE_IS_VERSION(4, 3, 0)
                 Handler()->customShadows()
                     ? widget()->rect().adjusted(layoutMetric(LM_OuterPaddingLeft), layoutMetric(LM_OuterPaddingTop),
                                                -layoutMetric(LM_OuterPaddingRight),
                                                 COMPOSITING_ENABLED ? 0 : -layoutMetric(LM_OuterPaddingBottom))
                     :
-#endif
                       widget()->rect());
 
         setMask(getMask(Handler()->wStyle()->pixelMetric((QStyle::PixelMetric)QtC_Round, NULL, NULL), r));
@@ -1079,7 +940,7 @@ QRegion QtCurveClient::getMask(int round
         }
         default: // ROUND_FULL
         {
-            bool    roundBottom=!isShade() && Handler()->roundBottom();
+            bool    roundBottom=!isShade() && isShadeable() && Handler()->roundBottom();
 
 // #if KDE_IS_VERSION(4, 3, 0)
 //             if(!isPreview() && COMPOSITING_ENABLED)
@@ -1166,13 +1027,11 @@ QRect QtCurveClient::captionRect() const
                            titleEdgeLeft - layoutMetric(LM_TitleEdgeRight) -
                            buttonsLeftWidth() - buttonsRightWidth() -
                            marginLeft - marginRight);
-#if KDE_IS_VERSION(4, 3, 0)
     if(Handler()->customShadows())
     {
         int shadowSize=Handler()->shadowCache().shadowSize();
         return QRect(titleLeft+shadowSize, r.top()+titleEdgeTop+shadowSize, titleWidth-(shadowSize*2), titleHeight);
     }
-#endif
     return QRect(titleLeft, r.top()+titleEdgeTop, titleWidth, titleHeight);
 }
 
@@ -1180,7 +1039,7 @@ void QtCurveClient::updateCaption()
 {
     QRect oldCaptionRect(m_captionRect);
 
-    m_captionRect=QtCurveClient::captionRect();
+    m_captionRect=captionRect();
 
     if (oldCaptionRect.isValid() && m_captionRect.isValid())
         widget()->update(oldCaptionRect|m_captionRect);
@@ -1211,270 +1070,11 @@ bool QtCurveClient::eventFilter(QObject
 //         return true;
 //     }
 
-#if KDE_IS_VERSION(4, 3, 85) && !KDE_IS_VERSION(4, 8, 80)
-    if (Handler()->grouping()) {
-        if (QtCurveButton *btn = qobject_cast<QtCurveButton*>(o)) {
-            if(QEvent::MouseButtonPress==e->type())
-                return true; // No-op
-            else if(QEvent::MouseButtonRelease==e->type())
-            {
-                const QMouseEvent *me = static_cast<QMouseEvent *>(e);
-                if(Qt::LeftButton==me->button() && btn->rect().contains(me->pos()))
-                    closeClientGroupItem(m_closeButtons.indexOf(btn));
-                return true;
-            }
-        }
-
-        bool state = false;
-        if(QEvent::MouseButtonPress==e->type())
-            state = mouseButtonPressEvent(static_cast<QMouseEvent *>(e));
-        else if(QEvent::MouseButtonRelease==e->type() && widget()==o)
-            state = mouseButtonReleaseEvent(static_cast<QMouseEvent *>(e));
-        else if(QEvent::MouseMove==e->type())
-            state = mouseMoveEvent(static_cast<QMouseEvent *>(e));
-        else if(QEvent::DragEnter==e->type() && widget()==o)
-            state = dragEnterEvent(static_cast<QDragEnterEvent *>(e));
-        else if(QEvent::DragMove==e->type() && widget()==o)
-            state = dragMoveEvent(static_cast<QDragMoveEvent *>(e));
-        else if(QEvent::DragLeave==e->type() && widget()==o)
-            state = dragLeaveEvent(static_cast<QDragLeaveEvent *>(e));
-        else if(QEvent::Drop==e->type() && widget()==o)
-            state = dropEvent(static_cast<QDropEvent *>(e));
-
-        return state || KCommonDecorationUnstable::eventFilter(o, e);
-    }
-#endif
     return KCommonDecoration::eventFilter(o, e);
 }
 
-#if KDE_IS_VERSION(4, 3, 85) && !KDE_IS_VERSION(4, 8, 80)
-bool QtCurveClient::mouseButtonPressEvent(QMouseEvent *e)
-{
-    m_clickPoint = widget()->mapToParent(e->pos());
-
-    int item = itemClicked(m_clickPoint);
-
-    if(OperationsOp==buttonToWindowOperation(e->button()))
-    {
-        displayClientMenu(item, widget()->mapToGlobal(m_clickPoint));
-        return true;
-    }
-    if(item >= 0)
-    {
-        m_clickInProgress = true;
-        m_mouseButton = e->button();
-        return true;
-    }
-    m_clickInProgress = false;
-    return false;
-}
-
-bool QtCurveClient::mouseButtonReleaseEvent(QMouseEvent *e)
-{
-    int item = itemClicked(widget()->mapToParent(e->pos()));
-
-    if(m_clickInProgress && item >= 0)
-    {
-        m_clickInProgress = false;
-        setVisibleClientGroupItem(item);
-        return true;
-    }
-    m_clickInProgress = false;
-    return false;
-}
-
-bool QtCurveClient::mouseMoveEvent(QMouseEvent *e)
-{
-    QPoint c    = e->pos();
-    int    item = itemClicked(c);
-
-    if(item >= 0 && m_clickInProgress && ClientGroupDragOp==buttonToWindowOperation(m_mouseButton) &&
-       (c - m_clickPoint).manhattanLength() >= 4)
-    {
-        m_clickInProgress = false;
-        m_dragInProgress = true;
-
-        QDrag     *drag      = new QDrag(widget());
-        QMimeData *groupData = new QMimeData();
-
-        groupData->setData(clientGroupItemDragMimeType(), QString().setNum(itemId(item)).toAscii());
-        drag->setMimeData(groupData);
-
-        // Create draggable tab pixmap
-        QList<ClientGroupItem> tabList  = clientGroupItems();
-        const int              tabCount = tabList.count();
-        QRect frame(QPoint(0, 0), widget()->frameGeometry().size()),
-              titlebar(frame.topLeft(), QSize(frame.width(),
-                       layoutMetric(LM_TitleEdgeTop) + layoutMetric(LM_TitleHeight) +
-                       layoutMetric(LM_TitleEdgeBottom) - 1 // Titlebar and main frame overlap by 1px
-                       )),
-              geom = titleRect().adjusted(-1, -layoutMetric(LM_TitleEdgeTop), 1, 0);
-
-        geom.setWidth(geom.width() / tabCount + 1); // Split titlebar evenly
-        geom.translate(geom.width() * item - item, 0);
-        QPixmap pix(geom.size());
-        pix.fill(Qt::transparent);
-        QPainter painter(&pix);
-
-        bool  showIcon=TITLEBAR_ICON_NEXT_TO_TITLE==Handler()->wStyle()->pixelMetric((QStyle::PixelMetric)QtC_TitleBarIcon,  0L, 0L);
-        int   iconSize=showIcon ? Handler()->wStyle()->pixelMetric(QStyle::PM_SmallIconSize) : 0;
-        QRect r(0, 0, geom.size().width()-(tabList.count() ? (TAB_CLOSE_ICON_SIZE+constTitlePad) : 0), geom.size().height());
-
-        painter.save();
-        painter.setRenderHint(QPainter::Antialiasing, true);
-
-        QStyleOptionTitleBar opt;
-        QColor               col(KDecoration::options()->color(KDecoration::ColorTitleBar, isActive()));
-
-        opt.init(widget());
-        opt.palette.setColor(QPalette::Window, col);
-        opt.palette.setColor(QPalette::Button, col);
-        opt.rect=r;
-        opt.titleBarState=(isActive() ? QStyle::State_Active : QStyle::State_None)|QtC_StateKWin;
-        opt.state|=QtC_StateKWin|QtC_StateKWinNoBorder|QtC_StateKWinTabDrag;
-        Handler()->wStyle()->drawComplexControl(QStyle::CC_TitleBar, &opt, &painter, widget());
-        painter.restore();
-        paintTitle(&painter, r, QRect(), tabList[item].title(), showIcon ? tabList[item].icon().pixmap(iconSize) : QPixmap(), 0,
-                   true, true);
-
-        drag->setPixmap(pix);
-        // If the cursor is on top of the pixmap then it makes the movement jerky on some systems
-        //drag->setHotSpot(QPoint(c.x() - geom.x(), c.y() - geom.y()));
-        drag->setHotSpot(QPoint(c.x() - geom.x(), -1));
-
-        drag->exec(Qt::MoveAction);
-        m_dragInProgress = false;
-        if(drag->target()==0 && tabList.count() > 1)
-        { // Remove window from group and move to where the cursor is located
-            QPoint pos = QCursor::pos();
-            frame.moveTo(pos.x() - c.x(), pos.y() - c.y());
-            removeFromClientGroup(itemClicked(m_clickPoint), frame);
-        }
-        return true;
-    }
-    return false;
-}
-
-bool QtCurveClient::dragEnterEvent(QDragEnterEvent *e)
-{
-    if(e->mimeData()->hasFormat(clientGroupItemDragMimeType()))
-    {
-        m_dragInProgress = true;
-        e->acceptProposedAction();
-        if(1==clientGroupItems().count() && widget()!=e->source())
-            m_targetTab = constAddToEmpty;
-        else
-            m_targetTab = itemClicked(widget()->mapToParent(e->pos()), true, true);
-        widget()->update();
-        return true;
-    }
-    return false;
-}
-
-bool QtCurveClient::dropEvent(QDropEvent *e)
-{
-    QPoint point    = widget()->mapToParent(e->pos());
-    int    tabClick = itemClicked(point, true, true);
-
-    m_dragInProgress = false;
-    if(tabClick >= 0)
-    {
-        const QMimeData *groupData = e->mimeData();
-        if(groupData->hasFormat(clientGroupItemDragMimeType()))
-        {
-            if(widget()==e->source())
-                moveItemInClientGroup(itemClicked(m_clickPoint), itemClicked(point, true, true));
-            else
-                moveItemToClientGroup(QString(groupData->data(clientGroupItemDragMimeType())).toLong(), itemClicked(point, true, true));
-            m_targetTab=constInvalidTab;
-            widget()->update();
-            return true;
-        }
-    }
-    else if(constInvalidTab!=m_targetTab)
-    {
-        m_targetTab=constInvalidTab;
-        widget()->update();
-    }
-    return false;
-}
-
-bool QtCurveClient::dragMoveEvent(QDragMoveEvent *e)
-{
-    if(e->mimeData()->hasFormat(clientGroupItemDragMimeType()))
-    {
-        e->acceptProposedAction();
-        int tt = 1==clientGroupItems().count() && widget()!=e->source()
-                    ? constAddToEmpty
-                    : itemClicked(widget()->mapToParent(e->pos()), true, true);
-        if(m_targetTab!=tt)
-        {
-            m_targetTab=tt;
-            widget()->update();
-        }
-        return true;
-    }
-    return false;
-}
-
-bool QtCurveClient::dragLeaveEvent(QDragLeaveEvent *)
-{
-    m_dragInProgress = false;
-    m_targetTab = constInvalidTab;
-    widget()->update();
-    return false;
-}
-
-int QtCurveClient::itemClicked(const QPoint &point, bool between, bool drag)
-{
-    QRect                  title = titleRect();
-    QList<ClientGroupItem> list = clientGroupItems();
-    int                    tabs = list.count(),
-                           shadowSize = Handler()->customShadows() ? Handler()->shadowCache().shadowSize() : 0,
-                           titleX = title.x()-shadowSize,
-                           frameY = 0,
-                           titleWidth = title.width(),
-                           titleHeight = layoutMetric(LM_TitleEdgeTop) +
-                                         layoutMetric(LM_TitleHeight) +
-                                         layoutMetric(LM_TitleEdgeBottom) + shadowSize,
-                           tabWidth = titleWidth/tabs;
-
-    if(drag)
-    {
-        if(point.x() <= title.left())
-            return 0;
-        else if(point.x() >= titleRect().right())
-            return tabs;
-    }
-
-    if(between) // We are inserting a new tab between two existing ones
-        titleX -= tabWidth / 2;
-
-    int rem  = titleWidth%(tabs+(drag ? 1 : 0)),
-        tabX = titleX;
-
-    for(int i = 0; i < tabs+(drag ? 1 : 0); ++i)
-    {
-        QRect tabRect(tabX, frameY, i<rem?tabWidth+1:tabWidth, titleHeight);
-
-        if(tabRect.contains(point))
-            return i;
-        tabX += tabRect.width();
-    }
-
-    return constInvalidTab;
-}
-#endif
-
 void QtCurveClient::reset(unsigned long changed)
 {
-#if KDE_IS_VERSION(4, 3, 85) && !KDE_IS_VERSION(4, 8, 80)
-    if(changed & SettingCompositing)
-    {
-        updateWindowShape();
-        widget()->update();
-    }
-#endif
     if (changed&(SettingColors|SettingFont|SettingBorder))
     {
         // Reset button backgrounds...
